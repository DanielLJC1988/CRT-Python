python三大特性
封装，多态，继承


pycharm 2016.3激活
使用方法：激活时选择License server 填入http://idea.imsxm.com 点击Active即可。

报名网站：
Raidenlu
itheima462386

tree	显示文件树形结构

ls	显示列表
ls -lha

touch	创建文件

mkdir	创建文件夹

rm

mv


压缩解压缩
--------------------------------

打包
tar -cvf 文件名.tar 需要打包的文件

打包并压缩1
tar -zcvf 文件名.tar.gz 需要打包的文件

打包并压缩2
tar -jcvf 文件名.tar.bz2 需要打包的文件

zip 文件名.zip 需要打包的文件

解包
tar -xvf 文件名

解压缩包
tar -zxvf 文件名.tar.gz	

unzip 文件名.zip

--------------------------------------

ps -aux	查看进程

top		动态显示进程

htop	高级动态显示进程

kill [-9]强制 进程号


-----------------------

终端多窗口快捷键 ctrl+shift+t

-------------------------

sudo useradd 名称 -m(在home下顺便新建同名文件夹)

-------------------------



权限修改字母法和数字发
------------------------

chmod (u拥有着 | g同组 | o其他人)=rwx 文件名
chmod u=r,g=r,o=r 文件名


r---->4
w---->2
x---->1

1		x
2		w
3		wx
4		r
5		rx
6		rw
7		rwx


---------------------------



文件编辑命令
---------------------------
1.gedig 基本不用
2.subl
3.vim
i       光标前插入
a       光标后插入
o       光标换行插入
I       行首插入
A		行末插入
O		上一行插入

yy		复制当前一行
p		粘贴
数字+yy	需要复制几行数字就是几（如：复制4行就是4yy）

dd		删除(剪切)光标行
2dd:	删除(剪切)光标所在行 向下2行
D：     从当前的光标开始剪切，一直到行末
d0：    从当前的光标开始剪切， 一直到行首
x：     从当前的光标开始往后剪切
X：     从当前的光标开始往前剪切

h左	j下	k上	l右
H：当前屏幕的上方
M：当前屏幕的中间
L：当前屏幕的下方

ctrl+f：向下翻一页
ctrl+b：向上翻一页

ctrl+d：向下翻半页
ctrl+u：向上翻半页

20G：快递定位到20行代码
G：	 快速回到整个代码的最后一行
gg： 快速回到整个代码第一行

w：  向后跳一个单词的长度，即跳到下一个单词的开始处
b：  向前跳一个单词的长度，即跳到上一个单词的开始处

u：     撤销操作
ctrl+r  反撤销

v：选中一片代码
V：
>>：向右移动代码
<<：向左移动代码

r：替换当前光标的字符
R：替换光标以及向后的字符

把abc全部替换成123
------------------
末行模式下，将当前文件中的所有abc替换成123
:%s/abc/123/gedig

末行模式下，将第一行至第10行之间的abc替换成123
:1,10s/abc/123/g
------------------

----------------
末行模式
w:保存
q:退出
wq:保存并退出
shift+zz：相当于wq
----------------


----------------
字典
添加
xxx [新的key] = value

删除
del xxx [key]

修改
xxx[已存在的key] = new_value

查询
xxx.get(key)
----------------


----------------
for ----------else

for xxx:

else:
-----------------



------------------
列表中的append-extend区别
append(整体添加) 结果[11,22,33,[44,55]]
extend(合并)     结果[11,22,33,44,55]
a = [11,22,33]
b = [44,55]

a.extend(b)
print(a)

a.append(b)
------------------


------------------
函数
def 函数名()

调用函数
函数名()

带有参数的函数


------------------



四种函数
def hanshu():
	pass
	
def hanshu():
	return xxx
	
def hanshu(canshu):
	pass
	
def hanshu(canshu):
	return xxx

---------------------

不定长函数
def xxx(a,b,*args,**kwargs):	

*args 类似为多余的参数，已元组显示
**kwargs类型为元组的参数，已字典显示


居中打印
print("|%s|" % str.center(10," "))   （双引号中间用中文空格）

靠左
str.ljust()
str.rjust()

拆分字符串
str.split()

合并字符串
" ".join(str)


私有属性方法（python没有真正意义的私有，只需要特殊处理还是能访问到类中的私有属性方法）
外部调用时 _类名 => _类名__名称
比如：xiaofang.__age 		 （访问不了）
	  xiaofang._Women__age	 （改成这样即可）
	  
	  
单继承
方法重写
私有属性和方法
多继承
多态
类属性
类方法
静态方法
方法综合使用
单例（__new__方法，多值参数（*args 元组参数，**kwargs 字典参数；
例子：def __new__(cls, *args, **kwargs):


异常（try: except Exception as result)未知错误
模块（import；from import) __name__属性
单独测试模块时 使用，外部导入模块后不会执行测试的代码
if __name__ == "__main__"
	测试的代码
	
包
制作模块
pip
文件操作

eval函数（可以去除字符串两边的“号）
eval("1 + 1")
输出2

列表生成式
例子1：a = [i for i in range(1,18)]
例子2：b = [i for i in range(10) if i%2==0]
例子3：c = [(i,j) for i in range(3) for j in range(2)]
例子4：d = [(i,j,k) for i in range(3) for j in range(2) for k in range(3)]

匿名函数
infors = [{"name":"laowang","age":10},{"name":"xiaoming","age":20}]
infors.sort(key=lambda x:x['name'])

用lambda关键词能创建小型匿名函数，这种函数得名于省略了用def声明函数的标准步骤
lambda函数的语法值包含一个语句，如下：
lambda [arg1 [arg2,.....argn]]:expression

如下实例：
sum = lambda arg1,arg2:arg1 + arg2
#调用sum函数
print “Value of total : ", sum(10, 20)
#输出结果：
Value of total : 30

----------------------------------------
例子1：
def test1(a, b):
    return a+b
result1 = test1(11,22)

test2 = lambda a,b:a+b
result2 = test2(11,22)#调用匿名函数



print("result1=%d,result2=%d"%(result1, result2))
------------------------------------------------------
例子2：
def test(a,b,func):
	result = func(a,b)
	return result
	
num = test(11,22,lambda x,y:x+y)
print(num)
---------------------------------------
例子3：
def test(a,b,func):
	result = func(a,b)
	return result

func_new = input("请输入一个匿名函数：")

func_new = eval(func_new)
num = test(11,22,func_new)
print(num)
----------------------------------

--------------------------------
定义常量
常量的命名应该 所有字母都使用大写，单词之间用下划线连接


-----------------
模块中的__all__作用：控制模块中的方法，全局变量等可以被其他文件导入并使用
__all__ = ["test1"]

def test1():
	print "test-1"
	
def test2():
	print "test-2"
-----------------

包__init__作用：将很多.py文件放入一个文件中，在这个文件夹中新建
一个__init__.py文件，
在文件中写入__all__ = [xxxx包名]
再写入 form . import xxxx包名()  
才能是这些.py文件被导入（import导入法和form导入法）使用

---去重----第一种是定义一个空列表，利用循环，第二种利用集合类型转换如下
a = [1,2,3,3,2,1]
b = set(a)
a = list[b]
输出a = [1,2,3]

-----------